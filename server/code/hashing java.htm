<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" xml:lang="en" xmlns:v="urn:schemas-microsoft-com:vml" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>


	
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta http-equiv="Content-Style-Type" content="text/css">
		<meta name="generator" content="MediaWiki 1.15.0">
		<meta name="robots" content="noindex,follow">
		<meta name="keywords" content="Hashing Java,Brute force attack">
		<link rel="stylesheet" type="text/css" media="screen, projection" href="hashing%20java_fichiers/fonts-min.css">
		<link rel="stylesheet" type="text/css" media="screen, projection" href="hashing%20java_fichiers/tabview.css">
		<link rel="stylesheet" type="text/css" media="screen, projection" href="hashing%20java_fichiers/headertabs.css">
		<link rel="shortcut icon" href="http://www.owasp.org/favicon.ico">
		<link rel="search" type="application/opensearchdescription+xml" href="http://www.owasp.org/opensearch_desc.php" title="OWASP (en)">
		<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/">
		<link rel="alternate" type="application/rss+xml" title="OWASP RSS Feed" href="http://www.owasp.org/index.php?title=Special:RecentChanges&amp;feed=rss">
		<link rel="alternate" type="application/atom+xml" title="OWASP Atom Feed" href="http://www.owasp.org/index.php?title=Special:RecentChanges&amp;feed=atom">
		<title>Hashing Java - OWASP</title>
		<style type="text/css" media="screen,projection">/*<![CDATA[*/ @import "/skins/monobook/main.css?207"; /*]]>*/</style>
		<link rel="stylesheet" type="text/css" href="hashing%20java_fichiers/commonPrint.css">
		<link rel="stylesheet" type="text/css" media="handheld" href="hashing%20java_fichiers/handheld.css">
		<!--[if lt IE 5.5000]><style type="text/css">@import "/skins/monobook/IE50Fixes.css?207";</style><![endif]-->
		<!--[if IE 5.5000]><style type="text/css">@import "/skins/monobook/IE55Fixes.css?207";</style><![endif]-->
		<!--[if IE 6]><style type="text/css">@import "/skins/monobook/IE60Fixes.css?207";</style><![endif]-->
		<!--[if IE 7]><style type="text/css">@import "/skins/monobook/IE70Fixes.css?207";</style><![endif]-->
		<!--[if lt IE 7]><script type="text/javascript" src="/skins/common/IEFixes.js?207"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
		
		<script type="text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins";
		var wgArticlePath = "/index.php/$1";
		var wgScriptPath = "";
		var wgScript = "/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://www.owasp.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Hashing_Java";
		var wgTitle = "Hashing Java";
		var wgAction = "view";
		var wgArticleId = "3273";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 62684;
		var wgVersion = "1.15.0";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>
                
		<script type="text/javascript" src="hashing%20java_fichiers/wikibits.js"><!-- wikibits js --></script>
		<script type="text/javascript" src="hashing%20java_fichiers/index.php"><!-- site js --></script>
		<!-- Head Scripts -->
				<script type="text/javascript">
function buildContent (blog) {
    var MONTH_NAMES = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
    if (!blog || !blog.items) return;  var container=document.getElementById("container");
    var code="";  for (var i = 0; i < blog.items.length; i++) {   var item = blog.items[i];
    var date = new Date();    date.setTime( 4 + item.published * 1000 );
    var datestring = MONTH_NAMES[date.getMonth()]+" "+(date.getDate());
    code=code+"<div style='font-weight:bold'>"+datestring+" - ";    
    code=code+"<a href='"+item.alternate.href+"'>"+item.title+"</a> (by ";
    code=code+"<a href='"+item.origin.streamId.substring(5)+"'>"+item.author+"</a>)</div>";
    var text=""+item.content;
    if (text == "undefined" ) {
	  text=item.summary;
    }
    code=code+"<div>"+text+"</div><br>";
    }
    container.innerHTML=code;
}
</script> 		<script type="text/javascript">
function build_bloglist(data) {
  var container = document.getElementById('blogroll');
  var list = document.createElement('div');
  // Loop through all data items returned
  for (var i=0; i < data.items.length; i++) {
    var item = data.items[i];
		var link = document.createElement('a');
		link.appendChild(document.createTextNode(item.title));
	link.href = item.id;
    list.appendChild(link);
    list.appendChild(document.createElement('br'));
  }
  container.appendChild(list);
}
</script>		<script type="text/javascript">
		addOnloadHook(function() { 
			var i = 1;
			while ( true ) {
				var btn = document.getElementById("languageselector-commit-"+i);
				var sel = document.getElementById("languageselector-select-"+i);
				var idx = i;

				if (!btn) break;

				btn.style.display = "none";
				sel.onchange = function() { this.parentNode.submit(); };

				i++;
			}
		});
	</script>		<script type="text/javascript">
			var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
			document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
			</script><script src="hashing%20java_fichiers/ga.js" type="text/javascript"></script>
			<script type="text/javascript">
			var pageTracker = _gat._getTracker("UA-725452-2");
			pageTracker._initData();
			pageTracker._trackPageview();
			</script>
		<script type="text/javascript" src="hashing%20java_fichiers/ajax.js"></script>
		<script type="text/javascript" src="hashing%20java_fichiers/utilities.js"></script>		<script type="text/javascript" src="hashing%20java_fichiers/tabview-min.js"></script>		<script type="text/javascript" src="hashing%20java_fichiers/event-min.js"></script>		<script type="text/javascript" src="hashing%20java_fichiers/history-min.js"></script>		<script type="text/javascript" src="hashing%20java_fichiers/headertabs.js"></script><link rel="alternate" type="application/rss+xml" title="OWASP Moderated AppSec News Feed" href="http://www.google.com/reader/public/atom/user/16712724397688793161/state/com.google/broadcast">
	</head><body class="mediawiki  ltr ns-0 ns-subject page-Hashing_Java">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 class="firstHeading">Hashing Java</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From OWASP</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table id="toc" class="toc" summary="Contents"><tbody><tr><td><div id="toctitle"><h2>Contents</h2> <span class="toctoggle">[<a href="javascript:toggleToc()" class="internal" id="togglelink">hide</a>]</span></div>
<ul>
<li class="toclevel-1"><a href="#Status"><span class="tocnumber">1</span> <span class="toctext">Status</span></a></li>
<li class="toclevel-1"><a href="#Introduction"><span class="tocnumber">2</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1"><a href="#Definition_of__cryptographic_Hashing_function:"><span class="tocnumber">3</span> <span class="toctext">Definition of  cryptographic Hashing function:</span></a></li>
<li class="toclevel-1"><a href="#Credential_storage."><span class="tocnumber">4</span> <span class="toctext">Credential storage.</span></a></li>
<li class="toclevel-1"><a href="#Why_add_salt_.3F"><span class="tocnumber">5</span> <span class="toctext">Why add salt&nbsp;?</span></a></li>
<li class="toclevel-1"><a href="#Hardening_against_the_attacker.27s_attack"><span class="tocnumber">6</span> <span class="toctext">Hardening against the attacker's attack</span></a></li>
<li class="toclevel-1"><a href="#Complete_Java_Sample"><span class="tocnumber">7</span> <span class="toctext">Complete Java Sample</span></a></li>
</ul>
</td></tr></tbody></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Status" id="Status"></a><h2> <span class="mw-headline"> Status </span></h2>
<p>Released 14/1/2008
</p>
<a name="Introduction" id="Introduction"></a><h2> <span class="mw-headline">Introduction</span></h2>
<p>Most of today’s applications use login/password in order to
authenticate. Users often use the same login/password for different
kinds of applications. If the couple is stolen, everybody can access
all the applications the user has access to. </p><p>Too often passwords are stored as clear text. Thus the
password can be read directly by the database’s administrator, super
users or SQL Injection attack etc. The backup media is also vulnerable.
In order to solve this problem, passwords must be stored encrypted. Two
kinds of encryption are available:
</p>
<ul><li> One way functions (SHA-256 SHA-1 MD5, ..;) also known as Hashing functions
</li><li> Reversible encryption functions (DES, AES, …). 
</li></ul>
<p>However, the reversible property of encryption function is useless for credentials storing (cf. OWASP Guide v2.0.1)&nbsp;:
</p><p><i>Passwords are secrets. There is no reason to decrypt them
under any circumstances. Helpdesk staff should be able to set new
passwords (with an audit trail, obviously), not read back old
passwords. Therefore, there is no reason to store passwords in a
reversible form.</i>
</p>
<a name="Definition_of__cryptographic_Hashing_function:" id="Definition_of__cryptographic_Hashing_function:"></a><h2> <span class="mw-headline">Definition of  cryptographic Hashing function:</span></h2>
<p>A Hash function creates a fixed length small fingerprint (or message digest) from an unlimited input string.
</p><p>hash(X) -&gt;Y          X is a infinite set and Y is a finite set.
</p><p>A good cryptographic Hash function must have these properties: 
</p>
<ul><li> Preimage  resistant&nbsp;: From the function output y it must impossible to compute the input x such that hash(x)=y. 
</li><li> Second preimage resistant&nbsp;: from an input x1 it must
impossible to compute another input x2 (different of x1) such that
hash(x1)=hash(x2).
</li><li> Collision resistant&nbsp;: It must be difficult to find two inputs x1 and x2 (x1&lt;&gt;x2) such that hash(x1)=hash(x2).
</li></ul>
<p><b>Sample java code&nbsp;:</b> 
</p>
<pre> import java.security.MessageDigest;
 
 public byte[] getHash(String password) throws NoSuchAlgorithmException {
       MessageDigest digest = MessageDigest.getInstance("SHA-1");
       digest.reset();
       byte[] input = digest.digest(password.getBytes("UTF-8"));
 }
</pre>
<a name="Credential_storage." id="Credential_storage."></a><h2> <span class="mw-headline">Credential storage.</span></h2>
<p>If the password’s digest is stored in a database, an attacker should
be unable to recover the password thanks to the preimage resistance.
The only way to go past this would be a <a href="http://www.owasp.org/index.php/Brute_force_attack" title="Brute force attack">brute force attack</a>, i.e. computing the hash of all possible passwords or a dictionary attack, i.e. computing all the often used password.
</p>
<a name="Why_add_salt_.3F" id="Why_add_salt_.3F"></a><h2> <span class="mw-headline">Why add salt&nbsp;? </span></h2>
<p>If each password is simply hashed, identical passwords will have the
same hash. There are two drawbacks to choosing to only storing the
password’s hash: </p>
<ul><li>	Due to the birthday paradox (<a href="http://en.wikipedia.org/wiki/Birthday_paradox" class="external free" title="http://en.wikipedia.org/wiki/Birthday_paradox" rel="nofollow">http://en.wikipedia.org/wiki/Birthday_paradox</a>), the attacker can find a password very quickly especially if the number of passwords the database is large.
</li><li>	An attacker can use a list of precomputed hashed (<a href="http://en.wikipedia.org/wiki/Rainbow_table" class="external free" title="http://en.wikipedia.org/wiki/Rainbow_table" rel="nofollow">http://en.wikipedia.org/wiki/Rainbow_table</a>) to break passwords in seconds.
</li></ul>
<p>In order to solve these problems, a salt can be concatenated to the password before the digest operation. 
</p><p>A salt is a random number of a fixed length. This salt must be
different for each stored entry. It must be stored as clear text next
to the hashed password.
</p><p>In this configuration, an attacker must handle a brute force
attack on each individual password. The database is now birthday
attack/rainbow crack resistant.
</p><p>A 64 bits salt is recommended in RSA PKCS5 standard.
</p><p><b>Sample java code&nbsp;:</b> 
</p>
<pre> import java.security.MessageDigest;
 
 
 public byte[] getHash(String password, byte[] salt) throws NoSuchAlgorithmException {
       MessageDigest digest = MessageDigest.getInstance("SHA-256");
       digest.reset();
       digest.update(salt);
       return digest.digest(password.getBytes("UTF-8"));
 }
</pre>
<a name="Hardening_against_the_attacker.27s_attack" id="Hardening_against_the_attacker.27s_attack"></a><h2> <span class="mw-headline">Hardening against the attacker's attack</span></h2>
<p>To slow down the computation it is recommended to iterate the hash
operation n times. While hashing the password n times does slow down
hashing for both attackers and typical users, typical users don't
really notice it being that hashing is such a small percentage of their
total time interacting with the system. On the other hand, an attacker
trying to crack passwords spends nearly 100% of their time hashing so
hashing n times gives the appearance of slowing the attacker down by a
factor of n while not noticeably affecting the typical user. A minimum
of 1000 operations is recommended in RSA PKCS5 standard.
</p><p>The stored password looks like this&nbsp;:
		Hash(hash(hash(hash(……….hash(password||salt)))))))))))))))
</p><p>To authenticate a user, the operation same as above must be performed, followed by a comparison of the two hashes.
</p><p>The hash function you need to use depends of your security policy. SHA-256 or SHA-512 is recommended for long term storage.
</p><p><b>Sample java code&nbsp;:</b> 
</p>
<pre> import java.security.*;
 
 
  public byte[] getHash(int iterationNb, String password, byte[] salt) throws NoSuchAlgorithmException {
       MessageDigest digest = MessageDigest.getInstance("SHA-1");
       digest.reset();
       digest.update(salt);
       byte[] input = digest.digest(password.getBytes("UTF-8"));
       for (int i = 0; i &lt; iterationNb; i++) {
           digest.reset();
           input = digest.digest(input);
       }
       return input;
   }
</pre>
<a name="Complete_Java_Sample" id="Complete_Java_Sample"></a><h2> <span class="mw-headline">Complete Java Sample</span></h2>
<p>In order to create the table needed by this application, call the method creerTable().
It creates a TABLE called CREDENTIAL, with these fields&nbsp;: 
</p>
<ul><li> LOGIN VARCHAR (100)  PRIMARY KEY
</li><li> PASSWORD VARCHAR (32)
</li><li> SALT VARCHAR (32)
</li></ul>
<p>In this database, the password and the salt are stored in Base64 representation.
</p><p>The method <i>authenticate</i> is used in order to authenticate a user, the method <i>createUser</i> is used to create a new user.
</p><p><br>
</p><p><br>
</p>
<pre> package org.psafix.memopwd;
 
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.io.IOException;
 import sun.misc.BASE64Decoder;
 import sun.misc.BASE64Encoder;
 import java.sql.*;
 import java.util.Arrays;
 import java.security.SecureRandom;
 
 public class Owasp {
   private final static int ITERATION_NUMBER = 1000;
 
   public Owasp() {
   }
 
   /**
    * Authenticates the user with a given login and password
    * If password and/or login is null then always returns false.
    * If the user does not exist in the database returns false.
    * @param con Connection An open connection to a databse
    * @param login String The login of the user
    * @param password String The password of the user
    * @return boolean Returns true if the user is authenticated, false otherwise
    * @throws SQLException If the database is inconsistent or unavailable (
    *           (Two users with the same login, salt or digested password altered etc.)
    * @throws NoSuchAlgorithmException If the algorithm SHA-1 is not supported by the JVM
    */
   public boolean authenticate(Connection con, String login, String password)
           throws SQLException, NoSuchAlgorithmException{
       boolean authenticated=false;
       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           boolean userExist = true;
           // INPUT VALIDATION
           if (login==null||password==null){
               // TIME RESISTANT ATTACK
               // Computation time is equal to the time needed by a legitimate user
               userExist = false;
               login="";
               password="";
           }
 
           ps = con.prepareStatement("SELECT PASSWORD, SALT FROM CREDENTIAL WHERE LOGIN =&nbsp;?");
           ps.setString(1, login);
           rs = ps.executeQuery();
           String digest, salt;
           if (rs.next()) {
               digest = rs.getString("PASSWORD");
               salt = rs.getString("SALT");
               // DATABASE VALIDATION
               if (digest == null || salt == null) {
                   throw new SQLException("Database inconsistant Salt or Digested Password altered");
               }
               if (rs.next()) { // Should not append, because login is the primary key
                   throw new SQLException("Database inconsistent two CREDENTIALS with the same LOGIN");
               }
           } else { // TIME RESISTANT ATTACK (Even if the user does not exist the
               // Computation time is equal to the time needed for a legitimate user
               digest = "000000000000000000000000000=";
               salt = "00000000000=";
               userExist = false;
           }
 
           byte[] bDigest = base64ToByte(digest);
           byte[] bSalt = base64ToByte(salt);
 
           // Compute the new DIGEST
           byte[] proposedDigest = getHash(ITERATION_NUMBER, password, bSalt);
 
           return Arrays.equals(proposedDigest, bDigest) &amp;&amp; userExist;
       } catch (IOException ex){
           throw new SQLException("Database inconsistant Salt or Digested Password altered");
       }
       finally{
           close(rs);
           close(ps);
       }
   }
 
 
 
   /**
    * Inserts a new user in the database
    * @param con Connection An open connection to a databse
    * @param login String The login of the user
    * @param password String The password of the user
    * @return boolean Returns true if the login and password are ok (not null and length(login)&lt;=100
    * @throws SQLException If the database is unavailable
    * @throws NoSuchAlgorithmException If the algorithm SHA-1 or the SecureRandom is not supported by the JVM
    */
   public boolean createUser(Connection con, String login, String password)
           throws SQLException, NoSuchAlgorithmException
   {
       PreparedStatement ps = null;
       try {
           if (login!=null&amp;&amp;password!=null&amp;&amp;login.length()&lt;=100){
               // Uses a secure Random not a simple Random
               SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
               // Salt generation 64 bits long
               byte[] bSalt = new byte[8];
               random.nextBytes(bSalt);
               // Digest computation
               byte[] bDigest = getHash(ITERATION_NUMBER,password,bSalt);
               String sDigest = byteToBase64(bDigest);
               String sSalt = byteToBase64(bSalt);
 
               ps = con.prepareStatement("INSERT INTO CREDENTIAL (LOGIN, PASSWORD, SALT) VALUES (?,?,?)");
               ps.setString(1,login);
               ps.setString(2,sDigest);
               ps.setString(3,sSalt);
               ps.executeUpdate();
               return true;
           } else {
               return false;
           }
       } finally {
           close(ps);
       }
   }
 
 
   /**
    * From a password, a number of iterations and a salt,
    * returns the corresponding digest
    * @param iterationNb int The number of iterations of the algorithm
    * @param password String The password to encrypt
    * @param salt byte[] The salt
    * @return byte[] The digested password
    * @throws NoSuchAlgorithmException If the algorithm doesn't exist
    */
   public byte[] getHash(int iterationNb, String password, byte[] salt) throws NoSuchAlgorithmException {
       MessageDigest digest = MessageDigest.getInstance("SHA-1");
       digest.reset();
       digest.update(salt);
       byte[] input = digest.digest(password.getBytes("UTF-8"));
       for (int i = 0; i &lt; iterationNb; i++) {
           digest.reset();
           input = digest.digest(input);
       }
       return input;
   }
 
 
   public void creerTable(Connection con) throws SQLException{
       Statement st = null;
       try {
           st = con.createStatement();
           st.execute("CREATE TABLE CREDENTIAL (LOGIN VARCHAR(100) PRIMARY KEY, PASSWORD VARCHAR(32) NOT NULL, SALT VARCHAR(32) NOT NULL)");
       } finally {
           close(st);
       }
   }
 
 
 
   /**
    * Closes the current statement
    * @param ps Statement
    */
   public void close(Statement ps) {
       if (ps!=null){
           try {
               ps.close();
           } catch (SQLException ignore) {
           }
       }
   }
 
   /**
    * Closes the current resultset
    * @param ps Statement
    */
   public void close(ResultSet rs) {
       if (rs!=null){
           try {
               rs.close();
           } catch (SQLException ignore) {
           }
       }
   }
 
 
   /**
    * From a base 64 representation, returns the corresponding byte[] 
    * @param data String The base64 representation
    * @return byte[]
    * @throws IOException
    */
   public static byte[] base64ToByte(String data) throws IOException {
       BASE64Decoder decoder = new BASE64Decoder();
       return decoder.decodeBuffer(data);
   }
 
   /**
    * From a byte[] returns a base 64 representation
    * @param data byte[]
    * @return String
    * @throws IOException
    */
   public static String byteToBase64(byte[] data){
       BASE64Encoder endecoder = new BASE64Encoder();
       return endecoder.encode(data);
   }
 
 
 }
</pre>
<!-- 
NewPP limit report
Preprocessor node count: 22/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wiki15:pcache:idhash:3273-0!1!0!!en!2!edit=0!printable=1 and timestamp 20100416163212 -->
<div class="printfooter">
Retrieved from "<a href="http://www.owasp.org/index.php/Hashing_Java">http://www.owasp.org/index.php/Hashing_Java</a>"</div>
			<div id="catlinks"><div id="catlinks" class="catlinks"><div id="mw-normal-catlinks"><a href="http://www.owasp.org/index.php/Special:Categories" title="Special:Categories">Category</a>: <span dir="ltr"><a href="http://www.owasp.org/index.php/Category:OWASP_Java_Project" title="Category:OWASP Java Project">OWASP Java Project</a></span></div></div></div>			<!-- end content -->
			<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
						 <li id="ca-nstab-main" class="selected"><a href="http://www.owasp.org/index.php/Hashing_Java">Page</a></li>
						 <li id="ca-talk"><a href="http://www.owasp.org/index.php/Talk:Hashing_Java">Discussion</a></li>
						 <li id="ca-viewsource"><a href="http://www.owasp.org/index.php?title=Hashing_Java&amp;action=edit">View source</a></li>
						 <li id="ca-history"><a href="http://www.owasp.org/index.php?title=Hashing_Java&amp;action=history">History</a></li>
				</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="http://www.owasp.org/index.php?title=Special:UserLogin&amp;returnto=Hashing_Java">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/skins/monobook/ologo.gif);" href="http://www.owasp.org/index.php/Main_Page" title="Main Page"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
        <div id="p-search" class="portlet">
                <h5><label for="searchInput">search</label></h5>
                <div id="searchBody" class="pBody">
                        <form id="searchbox_009205368367870198977:6sxqlkety5e" action="http://www.owasp.org/google/results.html">
                        <input name="cx" value="009205368367870198977:6sxqlkety5e" type="hidden">
                        <input style="border: 1px solid rgb(126, 157, 185); padding: 2px; background: rgb(255, 255, 255) url(google/google_custom_search_watermark.gif) no-repeat scroll left center; -moz-background-clip: border; -moz-background-origin: padding; -moz-background-inline-policy: continuous;" name="q" size="15" type="text">
                        <input name="sa" value="Search" type="submit">
                        <input name="cof" value="FORID:9" type="hidden">
                        </form>
                        <script type="text/javascript" src="hashing%20java_fichiers/google_coop.js"></script>
                </div>
        </div>
		<div class="portlet" id="p-Navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-Home"><a href="http://www.owasp.org/index.php/Main_Page">Home</a></li>
				<li id="n-News"><a href="http://www.owasp.org/index.php/Application_Security_News">News</a></li>
				<li id="n-OWASP-Projects"><a href="http://www.owasp.org/index.php/Category:OWASP_Project">OWASP Projects</a></li>
				<li id="n-Downloads"><a href="http://www.owasp.org/index.php/Category:OWASP_Download">Downloads</a></li>
				<li id="n-Local-Chapters"><a href="http://www.owasp.org/index.php/Category:OWASP_Chapter">Local Chapters</a></li>
				<li id="n-Global-Committees"><a href="https://www.owasp.org/index.php/Global_Committee_Pages">Global Committees</a></li>
				<li id="n-AppSec-Job-Board"><a href="http://www.owasp.org/index.php/OWASP_Jobs">AppSec Job Board</a></li>
				<li id="n-AppSec-Conferences"><a href="http://www.owasp.org/index.php/Category:OWASP_AppSec_Conference">AppSec Conferences</a></li>
				<li id="n-Presentations"><a href="http://www.owasp.org/index.php/Category:OWASP_Presentations">Presentations</a></li>
				<li id="n-Video"><a href="http://www.owasp.org/index.php/Category:OWASP_Video">Video</a></li>
				<li id="n-Get-OWASP-Books"><a href="http://stores.lulu.com/owasp">Get OWASP Books</a></li>
				<li id="n-Get-OWASP-Gear"><a href="http://www.cafepress.com/owasp">Get OWASP Gear</a></li>
				<li id="n-Mailing-Lists"><a href="http://lists.owasp.org/mailman/listinfo">Mailing Lists</a></li>
				<li id="n-About-OWASP"><a href="http://www.owasp.org/index.php/About_OWASP">About OWASP</a></li>
				<li id="n-Membership"><a href="http://www.owasp.org/index.php/Membership">Membership</a></li>
			</ul>
		</div>
	</div>
		<div class="portlet" id="p-Reference">
		<h5>Reference</h5>
		<div class="pBody">
			<ul>
				<li id="n-How-To..."><a href="http://www.owasp.org/index.php/Category:How_To">How To...</a></li>
				<li id="n-Principles"><a href="http://www.owasp.org/index.php/Category:Principle">Principles</a></li>
				<li id="n-Threat-Agents"><a href="http://www.owasp.org/index.php/Category:Threat_Agent">Threat Agents</a></li>
				<li id="n-Attacks"><a href="http://www.owasp.org/index.php/Category:Attack">Attacks</a></li>
				<li id="n-Vulnerabilities"><a href="http://www.owasp.org/index.php/Category:Vulnerability">Vulnerabilities</a></li>
				<li id="n-Controls"><a href="http://www.owasp.org/index.php/Category:Control">Controls</a></li>
				<li id="n-Activities"><a href="http://www.owasp.org/index.php/Category:Activity">Activities</a></li>
				<li id="n-Technologies"><a href="http://www.owasp.org/index.php/Category:Technology">Technologies</a></li>
				<li id="n-Glossary"><a href="http://www.owasp.org/index.php/Category:Glossary">Glossary</a></li>
				<li id="n-Code-Snippets"><a href="http://www.owasp.org/index.php/Category:Code_Snippet">Code Snippets</a></li>
				<li id="n-.NET-Project"><a href="http://www.owasp.org/index.php/Category:OWASP_.NET_Project">.NET Project</a></li>
				<li id="n-Java-Project"><a href="http://www.owasp.org/index.php/Category:OWASP_Java_Project">Java Project</a></li>
			</ul>
		</div>
	</div>
		<div class="portlet" id="p-languageselector">
		<h5>Language</h5>
		<div class="pBody">
			<ul>
				<li id="n-languageselector" class="active"><a href="http://www.owasp.org/index.php?title=Hashing_Java&amp;setlang=en">English</a></li>
				<li id="n-languageselector"><a href="http://www.owasp.org/index.php?title=Hashing_Java&amp;setlang=es">Español</a></li>
			</ul>
		</div>
	</div>
		<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
		<script src="hashing%20java_fichiers/ifr"></script><style>.ig_tbl_img .ig_smbluetext{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:9px;}.ig_tbl_img .ig_lgbluetext{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:12px;}.ig_tbl_img .ig_smbluelink, .ig_tbl_img .ig_smbluelink:link{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:9px;text-decoration:underline;}.ig_tbl_img .ig_lgbluelink, .ig_tbl_img .ig_lgbluelink:link{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:12px;text-decoration:underline;}.ig_tbl_line .ig_smbluetext{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:9px;}.ig_tbl_line .ig_lgbluetext{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:12px;}.ig_tbl_line .ig_smbluelink, .ig_tbl_line .ig_smbluelink:link{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:9px;text-decoration:underline;}.ig_tbl_line .ig_lgbluelink, .ig_tbl_line .ig_lgbluelink:link{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#0000cc;font-size:12px;text-decoration:underline;}.ig_smbluelink:hover{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#3366cc;font-size:9px;text-decoration:underline;}.ig_smbluelink:visited{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#551a8b;font-size:9px;text-decoration:underline;}.ig_smbluelink:active{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#ff0000;font-size:9px;text-decoration:underline;}.ig_lgbluelink:hover{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#3366cc;font-size:12px;text-decoration:underline;}.ig_lgbluelink:visited{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#551a8b;font-size:12px;text-decoration:underline;}.ig_lgbluelink:active{font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:normal;white-space:normal;color:#ff0000;font-size:12px;text-decoration:underline;}</style><style>.ig_tbl_img table,.ig_tbl_img tr,.ig_tbl_img td,.ig_tbl_img a,.ig_tbl_img span,.ig_tbl_line table,.ig_tbl_line tr,.ig_tbl_line td,.ig_tbl_line a,.ig_tbl_line span,ig_reset{margin:0;padding:0;padding-left:0;padding-right:0;border:0;border-collapse:collapse;float:none;clear:none;width:auto;height:auto;background:transparent none;background-position:0%;font-family:arial,sans-serif;font-variant:normal;font-style:normal;word-spacing:normal;letter-spacing:normal;vertical-align:middle;text-transform:none;text-indent:0;line-height:1.0;white-space:normal;top:auto;bottom:auto;}</style><table class="ig_reset ig_tbl_line" width="160"><tbody><tr><td colspan="2" style="vertical-align: bottom; text-align: center; width: 100%;">  </td></tr><tr><td style="height: 2px;"> </td></tr><tr><td colspan="2"><iframe src="hashing%20java_fichiers/ifr.htm" style="display: block;" width="160" frameborder="0" height="60" scrolling="no"></iframe></td></tr><tr><td style="text-align: left;"></td><td style="text-align: right; vertical-align: middle; height: 18px;"><div id="right_958732429"><a target="_top" style="font-size: 10px; color: rgb(0, 0, 204); text-decoration: underline;" href="http://www.google.com/webmasters/gadgets.html"> Gadgets</a><span style="font-size: 10px; color: rgb(0, 0, 204);"> fournis par Google</span></div></td></tr></tbody></table>
			<ul>
				<li id="t-whatlinkshere"><a href="http://www.owasp.org/index.php/Special:WhatLinksHere/Hashing_Java">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://www.owasp.org/index.php/Special:RecentChangesLinked/Hashing_Java">Related changes</a></li>
<li id="t-specialpages"><a href="http://www.owasp.org/index.php/Special:SpecialPages">Special pages</a></li>
				<li id="t-print"><a href="http://www.owasp.org/index.php?title=Hashing_Java&amp;printable=yes&amp;printable=yes">Printable version</a></li>				<li id="t-permalink"><a href="http://www.owasp.org/index.php?title=Hashing_Java&amp;oldid=62684">Permanent link</a></li>			</ul>
		</div>
	</div>

		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="hashing%20java_fichiers/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki"></a></div>
				<div id="f-copyrightico"><a href="http://creativecommons.org/licenses/by-sa/3.0/"><img src="hashing%20java_fichiers/Somerights20.png" alt="a Creative Commons 3.0 License"></a></div>
			<ul id="f-list">
				<li id="lastmod"> This page was last modified on 27 May 2009, at 18:29.</li>
				<li id="viewcount">This page has been accessed 41,676 times.</li>
				<li id="copyright">Content is available under <a href="http://creativecommons.org/licenses/by-sa/3.0/" class="external " title="http://creativecommons.org/licenses/by-sa/3.0/">a Creative Commons 3.0 License</a>.</li>
				<li id="privacy"><a href="http://www.owasp.org/index.php/OWASP:Privacy_policy" title="OWASP:Privacy policy">Privacy policy</a></li>
				<li id="about"><a href="http://www.owasp.org/index.php/OWASP:About" title="OWASP:About">About OWASP</a></li>
				<li id="disclaimer"><a href="http://www.owasp.org/index.php/OWASP:General_disclaimer" title="OWASP:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
		
	
		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
</div>
<!-- Served in 0.296 secs. --></body></html>lement('br'));
